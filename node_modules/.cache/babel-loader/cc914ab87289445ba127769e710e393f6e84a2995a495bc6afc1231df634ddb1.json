{"ast":null,"code":"var _jsxFileName = \"/Users/keerthanajusjith/Downloads/Projects/snake-and-ladders/src/App.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import './App.css';\n\n// function App() {\n//   const [players, setPlayers] = useState([]);\n//   const [numPlayers, setNumPlayers] = useState(2);\n//   const [currentPlayer, setCurrentPlayer] = useState(0);\n//   const [diceResult, setDiceResult] = useState(null);\n//   const [gameStarted, setGameStarted] = useState(false);\n//   const [tiles, setTiles] = useState([]);\n\n//   const ladders = [\n//     { start: 4, end: 25 },\n//     { start: 13, end: 46 },\n//     { start: 42, end: 63 },\n//     { start: 50, end: 69 },\n//     { start: 62, end: 81 },\n//     { start: 74, end: 92 }\n//   ];\n\n//   const snakes = [\n//     { start: 22, end: 5 },\n//     { start: 40, end: 3 },\n//     { start: 43, end: 18 },\n//     { start: 56, end: 31 },\n//     { start: 66, end: 45},\n//     { start: 89, end: 53 },\n//     { start: 95, end: 77 },\n//     { start: 99, end: 41 }\n//   ];\n\n//   useEffect(() => {\n//     const newTiles = [];\n//     for (let row = 0; row < 10; row++) {\n//       const currentRow = [];\n//       for (let col = 0; col < 10; col++) {\n//         const num = row % 2 === 0 ? row * 10 + col + 1 : row * 10 + (9 - col) + 1;\n//         currentRow.push(num);\n//       }\n//       newTiles.unshift(...currentRow);\n//     }\n//     setTiles(newTiles);\n//   }, []);\n\n//   const startGame = () => {\n//     const initPlayers = [];\n//     for (let i = 0; i < numPlayers; i++) {\n//       initPlayers.push({ id: i, pos: 1 });\n//     }\n//     setPlayers(initPlayers);\n//     setCurrentPlayer(0);\n//     setGameStarted(true);\n//     setDiceResult(null);\n//   };\n\n//   const rollDice = () => {\n//     const roll = Math.floor(Math.random() * 6) + 1;\n//     setDiceResult(roll);\n\n//     setPlayers((prevPlayers) => {\n//       return prevPlayers.map((player, i) => {\n//         if (i === currentPlayer) {\n//           let newPos = player.pos + roll;\n\n//           if (newPos > 100) newPos = player.pos;\n\n//           const ladder = ladders.find(l => l.start === newPos);\n//           if (ladder) newPos = ladder.end;\n\n//           const snake = snakes.find(s => s.start === newPos);\n//           if (snake) newPos = snake.end;\n\n//           if (newPos === 100) {\n//             alert(`ðŸŽ‰ Player ${i + 1} wins!`);\n//             setGameStarted(false);\n//           }\n\n//           return { ...player, pos: newPos };\n//         }\n//         return player;\n//       });\n//     });\n\n//     setTimeout(() => {\n//       setCurrentPlayer((prev) => (prev + 1) % numPlayers);\n//     }, 500);\n//   };\n\n//   const playerColors = ['#d9a441', '#6a994e', '#bc6c25', '#1d3557'];\n\n//   return (\n//     <div\n//       className=\"game\"\n//       style={{\n//         backgroundImage: \"url('/img/art.png')\",\n//         backgroundSize: \"cover\",\n//         backgroundAttachment: \"fixed\",\n//         backgroundPosition: \"center\"\n//       }}\n//     >\n//       <h1>Welcome To Snakes and Ladders</h1>\n\n//       {!gameStarted ? (\n//         <div className=\"setup\">\n//           <label>Select number of players:</label>\n//           <select value={numPlayers} onChange={(e) => setNumPlayers(Number(e.target.value))}>\n//             {[2, 3, 4].map(n => <option key={n} value={n}>{n}</option>)}\n//           </select>\n//           <button className=\"button\" onClick={startGame}>Start Game</button>\n//         </div>\n//       ) : (\n//         <>\n//           <div className=\"controls\">\n//             <p>ðŸŽ² Player {currentPlayer + 1}'s turn</p>\n//             <button className=\"button\" onClick={rollDice}>Roll Dice</button>\n//             {diceResult && (\n//               <div className=\"dice-container\">\n//                 <img\n//                   src={`/img/dice${diceResult}.png`}\n//                   alt={`Dice ${diceResult}`}\n//                   className=\"dice-img\"\n//                 />\n//                 <div id=\"dice-results\">You rolled: {diceResult}</div>\n//               </div>\n//             )}\n//           </div>\n\n//           <div className=\"board-container\">\n//             <img src=\"/img/SnakeLadder.png\" alt=\"Board\" className=\"board-img\" />\n//             {players.map((p, i) => {\n//   const posIndex = tiles.indexOf(p.pos);\n//   const row = Math.floor(posIndex / 10);\n//   const col = posIndex % 10;\n\n//   const top = `${row * 10 + 5}%`; // 10% per row, +5% to center in tile\n//   const left = `${col * 10 + 5}%`; // 10% per col, +5% to center in tile\n\n//   return (\n//     <div\n//       key={i}\n//       className=\"player-piece\"\n\n//       style={{\n//         position: 'absolute',\n//         top,\n//         left,\n//         backgroundColor: playerColors[p.id],\n//         width: '5%', // size of the token\n//         height: '5%',\n//         borderRadius: '50%',\n//         transform: 'translate(-50%, -50%)', // center visually\n//         display: 'flex',\n//         justifyContent: 'center',\n//         alignItems: 'center',\n//         color: 'white',\n//         fontWeight: 'bold',\n//         fontSize: '0.8rem'\n//       }}\n//     >\n//       {p.id + 1}\n//     </div>\n//   );\n// })}\n\n//           </div>\n//         </>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [players, setPlayers] = useState([]);\n  const [numPlayers, setNumPlayers] = useState(2);\n  const [currentPlayer, setCurrentPlayer] = useState(0);\n  const [diceResult, setDiceResult] = useState(null);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [tiles, setTiles] = useState([]);\n  const ladders = [{\n    start: 4,\n    end: 25\n  }, {\n    start: 13,\n    end: 46\n  }, {\n    start: 42,\n    end: 63\n  }, {\n    start: 50,\n    end: 69\n  }, {\n    start: 62,\n    end: 81\n  }, {\n    start: 74,\n    end: 92\n  }];\n  const snakes = [{\n    start: 22,\n    end: 5\n  }, {\n    start: 40,\n    end: 3\n  }, {\n    start: 43,\n    end: 18\n  }, {\n    start: 56,\n    end: 31\n  }, {\n    start: 66,\n    end: 45\n  }, {\n    start: 89,\n    end: 53\n  }, {\n    start: 95,\n    end: 77\n  }, {\n    start: 99,\n    end: 41\n  }];\n  useEffect(() => {\n    const newTiles = [];\n    for (let row = 0; row < 10; row++) {\n      const currentRow = [];\n      for (let col = 0; col < 10; col++) {\n        const num = row % 2 === 0 ? row * 10 + col + 1 : row * 10 + (9 - col) + 1;\n        currentRow.push(num);\n      }\n      newTiles.unshift(...currentRow);\n    }\n    setTiles(newTiles);\n  }, []);\n  const startGame = () => {\n    const initPlayers = [];\n    for (let i = 0; i < numPlayers; i++) {\n      initPlayers.push({\n        id: i,\n        pos: 1\n      });\n    }\n    setPlayers(initPlayers);\n    setCurrentPlayer(0);\n    setGameStarted(true);\n    setDiceResult(null);\n  };\n  const rollDice = () => {\n    const roll = Math.floor(Math.random() * 6) + 1;\n    setDiceResult(roll);\n    setPlayers(prevPlayers => {\n      return prevPlayers.map((player, i) => {\n        if (i === currentPlayer) {\n          let newPos = player.pos + roll;\n          if (newPos > 100) newPos = player.pos;\n          const ladder = ladders.find(l => l.start === newPos);\n          if (ladder) newPos = ladder.end;\n          const snake = snakes.find(s => s.start === newPos);\n          if (snake) newPos = snake.end;\n          if (newPos === 100) {\n            alert(`ðŸŽ‰ Player ${i + 1} wins!`);\n            setGameStarted(false);\n          }\n          return {\n            ...player,\n            pos: newPos\n          };\n        }\n        return player;\n      });\n    });\n    setTimeout(() => {\n      setCurrentPlayer(prev => (prev + 1) % numPlayers);\n    }, 500);\n  };\n  const playerColors = ['#d9a441', '#6a994e', '#bc6c25', '#1d3557'];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    style: {\n      backgroundImage: \"url('/img/art.png')\",\n      backgroundSize: \"cover\",\n      backgroundAttachment: \"fixed\",\n      backgroundPosition: \"center\",\n      overflow: \"hidden\",\n      height: \"100vh\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-wrapper\",\n      style: {\n        overflowY: \"auto\",\n        maxHeight: \"100vh\",\n        padding: \"20px\",\n        boxSizing: \"border-box\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Welcome To Snakes and Ladders\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 9\n      }, this), !gameStarted ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"setup\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Select number of players:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: numPlayers,\n          onChange: e => setNumPlayers(Number(e.target.value)),\n          children: [2, 3, 4].map(n => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: n,\n            children: n\n          }, n, false, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 35\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button\",\n          onClick: startGame,\n          children: \"Start Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"\\uD83C\\uDFB2 Player \", currentPlayer + 1, \"'s turn\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button\",\n            onClick: rollDice,\n            children: \"Roll Dice\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 15\n          }, this), diceResult && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dice-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: `/img/dice${diceResult}.png`,\n              alt: `Dice ${diceResult}`,\n              className: \"dice-img\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 294,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"dice-results\",\n              children: [\"You rolled: \", diceResult]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 299,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"/img/SnakeLadder.png\",\n            alt: \"Board\",\n            className: \"board-img\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 15\n          }, this), players.map((p, i) => {\n            const posIndex = tiles.indexOf(p.pos);\n            const row = Math.floor(posIndex / 10);\n            const col = posIndex % 10;\n            const top = `${row * 10 + 7}%`; // lower vertically\n            const left = `${col * 10 + 3}%`; // nudge slightly to the left\n\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"player-piece\",\n              style: {\n                position: 'absolute',\n                top,\n                left,\n                backgroundColor: playerColors[p.id],\n                width: '5%',\n                height: '5%',\n                borderRadius: '50%',\n                transform: 'translate(-50%, -50%)',\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                color: 'white',\n                fontWeight: 'bold',\n                fontSize: '0.8rem'\n              },\n              children: p.id + 1\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 315,\n              columnNumber: 19\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 265,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"dWFdbFMknHD5JxOW+wFDTfwj82k=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","players","setPlayers","numPlayers","setNumPlayers","currentPlayer","setCurrentPlayer","diceResult","setDiceResult","gameStarted","setGameStarted","tiles","setTiles","ladders","start","end","snakes","newTiles","row","currentRow","col","num","push","unshift","startGame","initPlayers","i","id","pos","rollDice","roll","Math","floor","random","prevPlayers","map","player","newPos","ladder","find","l","snake","s","alert","setTimeout","prev","playerColors","className","style","backgroundImage","backgroundSize","backgroundAttachment","backgroundPosition","overflow","height","children","overflowY","maxHeight","padding","boxSizing","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","Number","target","n","onClick","src","alt","p","posIndex","indexOf","top","left","position","backgroundColor","width","borderRadius","transform","display","justifyContent","alignItems","color","fontWeight","fontSize","_c","$RefreshReg$"],"sources":["/Users/keerthanajusjith/Downloads/Projects/snake-and-ladders/src/App.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import './App.css';\n\n// function App() {\n//   const [players, setPlayers] = useState([]);\n//   const [numPlayers, setNumPlayers] = useState(2);\n//   const [currentPlayer, setCurrentPlayer] = useState(0);\n//   const [diceResult, setDiceResult] = useState(null);\n//   const [gameStarted, setGameStarted] = useState(false);\n//   const [tiles, setTiles] = useState([]);\n\n//   const ladders = [\n//     { start: 4, end: 25 },\n//     { start: 13, end: 46 },\n//     { start: 42, end: 63 },\n//     { start: 50, end: 69 },\n//     { start: 62, end: 81 },\n//     { start: 74, end: 92 }\n//   ];\n\n//   const snakes = [\n//     { start: 22, end: 5 },\n//     { start: 40, end: 3 },\n//     { start: 43, end: 18 },\n//     { start: 56, end: 31 },\n//     { start: 66, end: 45},\n//     { start: 89, end: 53 },\n//     { start: 95, end: 77 },\n//     { start: 99, end: 41 }\n//   ];\n\n//   useEffect(() => {\n//     const newTiles = [];\n//     for (let row = 0; row < 10; row++) {\n//       const currentRow = [];\n//       for (let col = 0; col < 10; col++) {\n//         const num = row % 2 === 0 ? row * 10 + col + 1 : row * 10 + (9 - col) + 1;\n//         currentRow.push(num);\n//       }\n//       newTiles.unshift(...currentRow);\n//     }\n//     setTiles(newTiles);\n//   }, []);\n\n//   const startGame = () => {\n//     const initPlayers = [];\n//     for (let i = 0; i < numPlayers; i++) {\n//       initPlayers.push({ id: i, pos: 1 });\n//     }\n//     setPlayers(initPlayers);\n//     setCurrentPlayer(0);\n//     setGameStarted(true);\n//     setDiceResult(null);\n//   };\n\n//   const rollDice = () => {\n//     const roll = Math.floor(Math.random() * 6) + 1;\n//     setDiceResult(roll);\n\n//     setPlayers((prevPlayers) => {\n//       return prevPlayers.map((player, i) => {\n//         if (i === currentPlayer) {\n//           let newPos = player.pos + roll;\n\n//           if (newPos > 100) newPos = player.pos;\n\n//           const ladder = ladders.find(l => l.start === newPos);\n//           if (ladder) newPos = ladder.end;\n\n//           const snake = snakes.find(s => s.start === newPos);\n//           if (snake) newPos = snake.end;\n\n//           if (newPos === 100) {\n//             alert(`ðŸŽ‰ Player ${i + 1} wins!`);\n//             setGameStarted(false);\n//           }\n\n//           return { ...player, pos: newPos };\n//         }\n//         return player;\n//       });\n//     });\n\n//     setTimeout(() => {\n//       setCurrentPlayer((prev) => (prev + 1) % numPlayers);\n//     }, 500);\n//   };\n\n//   const playerColors = ['#d9a441', '#6a994e', '#bc6c25', '#1d3557'];\n\n\n//   return (\n//     <div\n//       className=\"game\"\n//       style={{\n//         backgroundImage: \"url('/img/art.png')\",\n//         backgroundSize: \"cover\",\n//         backgroundAttachment: \"fixed\",\n//         backgroundPosition: \"center\"\n//       }}\n//     >\n//       <h1>Welcome To Snakes and Ladders</h1>\n\n//       {!gameStarted ? (\n//         <div className=\"setup\">\n//           <label>Select number of players:</label>\n//           <select value={numPlayers} onChange={(e) => setNumPlayers(Number(e.target.value))}>\n//             {[2, 3, 4].map(n => <option key={n} value={n}>{n}</option>)}\n//           </select>\n//           <button className=\"button\" onClick={startGame}>Start Game</button>\n//         </div>\n//       ) : (\n//         <>\n//           <div className=\"controls\">\n//             <p>ðŸŽ² Player {currentPlayer + 1}'s turn</p>\n//             <button className=\"button\" onClick={rollDice}>Roll Dice</button>\n//             {diceResult && (\n//               <div className=\"dice-container\">\n//                 <img\n//                   src={`/img/dice${diceResult}.png`}\n//                   alt={`Dice ${diceResult}`}\n//                   className=\"dice-img\"\n//                 />\n//                 <div id=\"dice-results\">You rolled: {diceResult}</div>\n//               </div>\n//             )}\n//           </div>\n\n//           <div className=\"board-container\">\n//             <img src=\"/img/SnakeLadder.png\" alt=\"Board\" className=\"board-img\" />\n//             {players.map((p, i) => {\n//   const posIndex = tiles.indexOf(p.pos);\n//   const row = Math.floor(posIndex / 10);\n//   const col = posIndex % 10;\n\n//   const top = `${row * 10 + 5}%`; // 10% per row, +5% to center in tile\n//   const left = `${col * 10 + 5}%`; // 10% per col, +5% to center in tile\n\n//   return (\n//     <div\n//       key={i}\n//       className=\"player-piece\"\n      \n//       style={{\n//         position: 'absolute',\n//         top,\n//         left,\n//         backgroundColor: playerColors[p.id],\n//         width: '5%', // size of the token\n//         height: '5%',\n//         borderRadius: '50%',\n//         transform: 'translate(-50%, -50%)', // center visually\n//         display: 'flex',\n//         justifyContent: 'center',\n//         alignItems: 'center',\n//         color: 'white',\n//         fontWeight: 'bold',\n//         fontSize: '0.8rem'\n//       }}\n//     >\n//       {p.id + 1}\n//     </div>\n//   );\n// })}\n\n//           </div>\n//         </>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [players, setPlayers] = useState([]);\n  const [numPlayers, setNumPlayers] = useState(2);\n  const [currentPlayer, setCurrentPlayer] = useState(0);\n  const [diceResult, setDiceResult] = useState(null);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [tiles, setTiles] = useState([]);\n\n  const ladders = [\n    { start: 4, end: 25 },\n    { start: 13, end: 46 },\n    { start: 42, end: 63 },\n    { start: 50, end: 69 },\n    { start: 62, end: 81 },\n    { start: 74, end: 92 }\n  ];\n\n  const snakes = [\n    { start: 22, end: 5 },\n    { start: 40, end: 3 },\n    { start: 43, end: 18 },\n    { start: 56, end: 31 },\n    { start: 66, end: 45},\n    { start: 89, end: 53 },\n    { start: 95, end: 77 },\n    { start: 99, end: 41 }\n  ];\n\n  useEffect(() => {\n    const newTiles = [];\n    for (let row = 0; row < 10; row++) {\n      const currentRow = [];\n      for (let col = 0; col < 10; col++) {\n        const num = row % 2 === 0 ? row * 10 + col + 1 : row * 10 + (9 - col) + 1;\n        currentRow.push(num);\n      }\n      newTiles.unshift(...currentRow);\n    }\n    setTiles(newTiles);\n  }, []);\n\n  const startGame = () => {\n    const initPlayers = [];\n    for (let i = 0; i < numPlayers; i++) {\n      initPlayers.push({ id: i, pos: 1 });\n    }\n    setPlayers(initPlayers);\n    setCurrentPlayer(0);\n    setGameStarted(true);\n    setDiceResult(null);\n  };\n\n  const rollDice = () => {\n    const roll = Math.floor(Math.random() * 6) + 1;\n    setDiceResult(roll);\n\n    setPlayers((prevPlayers) => {\n      return prevPlayers.map((player, i) => {\n        if (i === currentPlayer) {\n          let newPos = player.pos + roll;\n\n          if (newPos > 100) newPos = player.pos;\n\n          const ladder = ladders.find(l => l.start === newPos);\n          if (ladder) newPos = ladder.end;\n\n          const snake = snakes.find(s => s.start === newPos);\n          if (snake) newPos = snake.end;\n\n          if (newPos === 100) {\n            alert(`ðŸŽ‰ Player ${i + 1} wins!`);\n            setGameStarted(false);\n          }\n\n          return { ...player, pos: newPos };\n        }\n        return player;\n      });\n    });\n\n    setTimeout(() => {\n      setCurrentPlayer((prev) => (prev + 1) % numPlayers);\n    }, 500);\n  };\n\n  const playerColors = ['#d9a441', '#6a994e', '#bc6c25', '#1d3557'];\n\n  return (\n    <div\n      className=\"game\"\n      style={{\n        backgroundImage: \"url('/img/art.png')\",\n        backgroundSize: \"cover\",\n        backgroundAttachment: \"fixed\",\n        backgroundPosition: \"center\",\n        overflow: \"hidden\",\n        height: \"100vh\"\n      }}\n    >\n      <div className=\"game-wrapper\" style={{ overflowY: \"auto\", maxHeight: \"100vh\", padding: \"20px\", boxSizing: \"border-box\" }}>\n        <h1>Welcome To Snakes and Ladders</h1>\n\n        {!gameStarted ? (\n          <div className=\"setup\">\n            <label>Select number of players:</label>\n            <select value={numPlayers} onChange={(e) => setNumPlayers(Number(e.target.value))}>\n              {[2, 3, 4].map(n => <option key={n} value={n}>{n}</option>)}\n            </select>\n            <button className=\"button\" onClick={startGame}>Start Game</button>\n          </div>\n        ) : (\n          <>\n            <div className=\"controls\">\n              <p>ðŸŽ² Player {currentPlayer + 1}'s turn</p>\n              <button className=\"button\" onClick={rollDice}>Roll Dice</button>\n              {diceResult && (\n                <div className=\"dice-container\">\n                  <img\n                    src={`/img/dice${diceResult}.png`}\n                    alt={`Dice ${diceResult}`}\n                    className=\"dice-img\"\n                  />\n                  <div id=\"dice-results\">You rolled: {diceResult}</div>\n                </div>\n              )}\n            </div>\n\n            <div className=\"board-container\">\n              <img src=\"/img/SnakeLadder.png\" alt=\"Board\" className=\"board-img\" />\n              {players.map((p, i) => {\n                const posIndex = tiles.indexOf(p.pos);\n                const row = Math.floor(posIndex / 10);\n                const col = posIndex % 10;\n\n                const top = `${row * 10 + 7}%`;  // lower vertically\n                const left = `${col * 10 + 3}%`; // nudge slightly to the left\n\n                return (\n                  <div\n                    key={i}\n                    className=\"player-piece\"\n                    style={{\n                      position: 'absolute',\n                      top,\n                      left,\n                      backgroundColor: playerColors[p.id],\n                      width: '5%',\n                      height: '5%',\n                      borderRadius: '50%',\n                      transform: 'translate(-50%, -50%)',\n                      display: 'flex',\n                      justifyContent: 'center',\n                      alignItems: 'center',\n                      color: 'white',\n                      fontWeight: 'bold',\n                      fontSize: '0.8rem'\n                    }}\n                  >\n                    {p.id + 1}\n                  </div>\n                );\n              })}\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACU,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACY,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC;EACrD,MAAM,CAACc,UAAU,EAAEC,aAAa,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACgB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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}