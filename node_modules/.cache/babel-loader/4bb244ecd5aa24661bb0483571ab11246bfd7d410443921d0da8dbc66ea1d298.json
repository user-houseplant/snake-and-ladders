{"ast":null,"code":"var _jsxFileName = \"/Users/keerthanajusjith/Downloads/snakes-and-ladders-react (2)/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [players, setPlayers] = useState([]);\n  const [numPlayers, setNumPlayers] = useState(2);\n  const [currentPlayer, setCurrentPlayer] = useState(0);\n  const [diceResult, setDiceResult] = useState(null);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [tiles, setTiles] = useState([]);\n  const ladders = {\n    4: 14,\n    9: 31,\n    20: 38,\n    28: 84,\n    40: 59,\n    51: 67,\n    63: 81,\n    71: 91\n  };\n  const snakes = {\n    17: 7,\n    54: 34,\n    62: 19,\n    64: 60,\n    87: 24,\n    93: 73,\n    95: 75,\n    99: 78\n  };\n  useEffect(() => {\n    const newTiles = [];\n    for (let row = 0; row < 10; row++) {\n      const tileRow = [];\n      for (let col = 0; col < 10; col++) {\n        const number = row * 10 + col + 1;\n        tileRow.push(number);\n      }\n\n      // Snake-style: reverse every other row\n      if (row % 2 === 1) tileRow.reverse();\n      newTiles.push(tileRow);\n    }\n\n    // Flatten and reverse the whole array to start from top-left\n    setTiles(newTiles.reverse().flat());\n  }, []);\n  const startGame = () => {\n    const initPlayers = [];\n    for (let i = 0; i < numPlayers; i++) {\n      initPlayers.push({\n        id: i,\n        pos: 1\n      });\n    }\n    setPlayers(initPlayers);\n    setCurrentPlayer(0);\n    setGameStarted(true);\n  };\n  const rollDice = () => {\n    const result = Math.floor(Math.random() * 6) + 1;\n    setDiceResult(result);\n    const updatedPlayers = [...players];\n    let newPos = updatedPlayers[currentPlayer].pos + result;\n    if (newPos > 100) newPos = updatedPlayers[currentPlayer].pos;\n    if (ladders[newPos]) newPos = ladders[newPos];else if (snakes[newPos]) newPos = snakes[newPos];\n    updatedPlayers[currentPlayer].pos = newPos;\n    setPlayers(updatedPlayers);\n    if (newPos === 100) {\n      alert(`ðŸŽ‰ Player ${currentPlayer + 1} wins!`);\n      setGameStarted(false);\n    } else {\n      setCurrentPlayer((currentPlayer + 1) % numPlayers);\n    }\n  };\n  const playerColors = ['blue', 'red', 'green', 'purple'];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    style: {\n      backgroundImage: \"url('/img/art.png')\",\n      backgroundSize: \"cover\",\n      backgroundAttachment: \"fixed\",\n      backgroundPosition: \"center\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Snakes and Ladders\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), !gameStarted ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"setup\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Select number of players:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: numPlayers,\n        onChange: e => setNumPlayers(Number(e.target.value)),\n        children: [2, 3, 4].map(n => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: n,\n          children: n\n        }, n, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 33\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button\",\n        onClick: startGame,\n        children: \"Start Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\uD83C\\uDFB2 Player \", currentPlayer + 1, \"'s turn\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button\",\n          onClick: rollDice,\n          children: \"Roll Dice\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this), diceResult && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dice-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: `/img/dice${diceResult}.png`,\n            alt: `Dice ${diceResult}`,\n            className: \"dice-img\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"dice-results\",\n            children: [\"You rolled: \", diceResult]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this)\n    }, void 0, false), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"board\",\n      style: {\n        backgroundImage: \"url('/img/SnakeLadder.png')\",\n        backgroundRepeat: \"no-repeat\",\n        backgroundSize: \"cover\"\n      },\n      children: tiles.map((num, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tile\",\n        children: players.map((p, i) => p.pos === num && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"player\",\n          style: {\n            backgroundColor: playerColors[p.id],\n            left: `${i * 18}px`\n          },\n          children: p.id + 1\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 17\n        }, this))\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"dWFdbFMknHD5JxOW+wFDTfwj82k=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","players","setPlayers","numPlayers","setNumPlayers","currentPlayer","setCurrentPlayer","diceResult","setDiceResult","gameStarted","setGameStarted","tiles","setTiles","ladders","snakes","newTiles","row","tileRow","col","number","push","reverse","flat","startGame","initPlayers","i","id","pos","rollDice","result","Math","floor","random","updatedPlayers","newPos","alert","playerColors","className","style","backgroundImage","backgroundSize","backgroundAttachment","backgroundPosition","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","Number","target","map","n","onClick","src","alt","backgroundRepeat","num","index","p","backgroundColor","left","_c","$RefreshReg$"],"sources":["/Users/keerthanajusjith/Downloads/snakes-and-ladders-react (2)/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [players, setPlayers] = useState([]);\n  const [numPlayers, setNumPlayers] = useState(2);\n  const [currentPlayer, setCurrentPlayer] = useState(0);\n  const [diceResult, setDiceResult] = useState(null);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [tiles, setTiles] = useState([]);\n\n  const ladders = {\n    4: 14, 9: 31, 20: 38, 28: 84,\n    40: 59, 51: 67, 63: 81, 71: 91\n  };\n\n  const snakes = {\n    17: 7, 54: 34, 62: 19, 64: 60,\n    87: 24, 93: 73, 95: 75, 99: 78\n  };\n\n  useEffect(() => {\n    const newTiles = [];\n  \n    for (let row = 0; row < 10; row++) {\n      const tileRow = [];\n      for (let col = 0; col < 10; col++) {\n        const number = row * 10 + col + 1;\n        tileRow.push(number);\n      }\n  \n      // Snake-style: reverse every other row\n      if (row % 2 === 1) tileRow.reverse();\n  \n      newTiles.push(tileRow);\n    }\n  \n    // Flatten and reverse the whole array to start from top-left\n    setTiles(newTiles.reverse().flat());\n  }, []);\n  \n\n  const startGame = () => {\n    const initPlayers = [];\n    for (let i = 0; i < numPlayers; i++) {\n      initPlayers.push({ id: i, pos: 1 });\n    }\n    setPlayers(initPlayers);\n    setCurrentPlayer(0);\n    setGameStarted(true);\n  };\n\n  const rollDice = () => {\n    const result = Math.floor(Math.random() * 6) + 1;\n    setDiceResult(result);\n\n    const updatedPlayers = [...players];\n    let newPos = updatedPlayers[currentPlayer].pos + result;\n    if (newPos > 100) newPos = updatedPlayers[currentPlayer].pos;\n\n    if (ladders[newPos]) newPos = ladders[newPos];\n    else if (snakes[newPos]) newPos = snakes[newPos];\n\n    updatedPlayers[currentPlayer].pos = newPos;\n    setPlayers(updatedPlayers);\n\n    if (newPos === 100) {\n      alert(`ðŸŽ‰ Player ${currentPlayer + 1} wins!`);\n      setGameStarted(false);\n    } else {\n      setCurrentPlayer((currentPlayer + 1) % numPlayers);\n    }\n  };\n\n  const playerColors = ['blue', 'red', 'green', 'purple'];\n\n  return (\n    <div\n      className=\"game\"\n      style={{\n        backgroundImage: \"url('/img/art.png')\",\n        backgroundSize: \"cover\",\n        backgroundAttachment: \"fixed\",\n        backgroundPosition: \"center\"\n      }}\n    >\n      <h1>Snakes and Ladders</h1>\n\n      {!gameStarted ? (\n        <div className=\"setup\">\n          <label>Select number of players:</label>\n          <select value={numPlayers} onChange={(e) => setNumPlayers(Number(e.target.value))}>\n            {[2, 3, 4].map(n => <option key={n} value={n}>{n}</option>)}\n          </select>\n          <button className=\"button\" onClick={startGame}>Start Game</button>\n        </div>\n      ) : (\n        <>\n          <div className=\"controls\">\n            <p>ðŸŽ² Player {currentPlayer + 1}'s turn</p>\n            <button className=\"button\" onClick={rollDice}>Roll Dice</button>\n            {diceResult && (\n              <div className=\"dice-container\">\n                <img\n                  src={`/img/dice${diceResult}.png`}\n                  alt={`Dice ${diceResult}`}\n                  className=\"dice-img\"\n                />\n                <div id=\"dice-results\">You rolled: {diceResult}</div>\n              </div>\n            )}\n          </div>\n        </>\n      )}\n\n      <div\n        id=\"board\"\n        style={{\n          backgroundImage: \"url('/img/SnakeLadder.png')\",\n          backgroundRepeat: \"no-repeat\",\n          backgroundSize: \"cover\"\n        }}\n      >\n        {tiles.map((num, index) => (\n          <div className=\"tile\" key={index}>\n            {/* You can optionally show numbers like this:\n            <div className=\"tile-number\">{num}</div>\n            */}\n            {players.map((p, i) =>\n              p.pos === num && (\n                <div\n                  key={i}\n                  className=\"player\"\n                  style={{\n                    backgroundColor: playerColors[p.id],\n                    left: `${i * 18}px`\n                  }}\n                >\n                  {p.id + 1}\n                </div>\n              )\n            )}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACU,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACY,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC;EACrD,MAAM,CAACc,UAAU,EAAEC,aAAa,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACgB,WAAW,EAAEC,cAAc,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACkB,KAAK,EAAEC,QAAQ,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMoB,OAAO,GAAG;IACd,CAAC,EAAE,EAAE;IAAE,CAAC,EAAE,EAAE;IAAE,EAAE,EAAE,EAAE;IAAE,EAAE,EAAE,EAAE;IAC5B,EAAE,EAAE,EAAE;IAAE,EAAE,EAAE,EAAE;IAAE,EAAE,EAAE,EAAE;IAAE,EAAE,EAAE;EAC9B,CAAC;EAED,MAAMC,MAAM,GAAG;IACb,EAAE,EAAE,CAAC;IAAE,EAAE,EAAE,EAAE;IAAE,EAAE,EAAE,EAAE;IAAE,EAAE,EAAE,EAAE;IAC7B,EAAE,EAAE,EAAE;IAAE,EAAE,EAAE,EAAE;IAAE,EAAE,EAAE,EAAE;IAAE,EAAE,EAAE;EAC9B,CAAC;EAEDpB,SAAS,CAAC,MAAM;IACd,MAAMqB,QAAQ,GAAG,EAAE;IAEnB,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,EAAE,EAAEA,GAAG,EAAE,EAAE;MACjC,MAAMC,OAAO,GAAG,EAAE;MAClB,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,EAAE,EAAEA,GAAG,EAAE,EAAE;QACjC,MAAMC,MAAM,GAAGH,GAAG,GAAG,EAAE,GAAGE,GAAG,GAAG,CAAC;QACjCD,OAAO,CAACG,IAAI,CAACD,MAAM,CAAC;MACtB;;MAEA;MACA,IAAIH,GAAG,GAAG,CAAC,KAAK,CAAC,EAAEC,OAAO,CAACI,OAAO,CAAC,CAAC;MAEpCN,QAAQ,CAACK,IAAI,CAACH,OAAO,CAAC;IACxB;;IAEA;IACAL,QAAQ,CAACG,QAAQ,CAACM,OAAO,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;EACrC,CAAC,EAAE,EAAE,CAAC;EAGN,MAAMC,SAAS,GAAGA,CAAA,KAAM;IACtB,MAAMC,WAAW,GAAG,EAAE;IACtB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGtB,UAAU,EAAEsB,CAAC,EAAE,EAAE;MACnCD,WAAW,CAACJ,IAAI,CAAC;QAAEM,EAAE,EAAED,CAAC;QAAEE,GAAG,EAAE;MAAE,CAAC,CAAC;IACrC;IACAzB,UAAU,CAACsB,WAAW,CAAC;IACvBlB,gBAAgB,CAAC,CAAC,CAAC;IACnBI,cAAc,CAAC,IAAI,CAAC;EACtB,CAAC;EAED,MAAMkB,QAAQ,GAAGA,CAAA,KAAM;IACrB,MAAMC,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;IAChDxB,aAAa,CAACqB,MAAM,CAAC;IAErB,MAAMI,cAAc,GAAG,CAAC,GAAGhC,OAAO,CAAC;IACnC,IAAIiC,MAAM,GAAGD,cAAc,CAAC5B,aAAa,CAAC,CAACsB,GAAG,GAAGE,MAAM;IACvD,IAAIK,MAAM,GAAG,GAAG,EAAEA,MAAM,GAAGD,cAAc,CAAC5B,aAAa,CAAC,CAACsB,GAAG;IAE5D,IAAId,OAAO,CAACqB,MAAM,CAAC,EAAEA,MAAM,GAAGrB,OAAO,CAACqB,MAAM,CAAC,CAAC,KACzC,IAAIpB,MAAM,CAACoB,MAAM,CAAC,EAAEA,MAAM,GAAGpB,MAAM,CAACoB,MAAM,CAAC;IAEhDD,cAAc,CAAC5B,aAAa,CAAC,CAACsB,GAAG,GAAGO,MAAM;IAC1ChC,UAAU,CAAC+B,cAAc,CAAC;IAE1B,IAAIC,MAAM,KAAK,GAAG,EAAE;MAClBC,KAAK,CAAC,aAAa9B,aAAa,GAAG,CAAC,QAAQ,CAAC;MAC7CK,cAAc,CAAC,KAAK,CAAC;IACvB,CAAC,MAAM;MACLJ,gBAAgB,CAAC,CAACD,aAAa,GAAG,CAAC,IAAIF,UAAU,CAAC;IACpD;EACF,CAAC;EAED,MAAMiC,YAAY,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,QAAQ,CAAC;EAEvD,oBACExC,OAAA;IACEyC,SAAS,EAAC,MAAM;IAChBC,KAAK,EAAE;MACLC,eAAe,EAAE,qBAAqB;MACtCC,cAAc,EAAE,OAAO;MACvBC,oBAAoB,EAAE,OAAO;MAC7BC,kBAAkB,EAAE;IACtB,CAAE;IAAAC,QAAA,gBAEF/C,OAAA;MAAA+C,QAAA,EAAI;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAE1B,CAACtC,WAAW,gBACXb,OAAA;MAAKyC,SAAS,EAAC,OAAO;MAAAM,QAAA,gBACpB/C,OAAA;QAAA+C,QAAA,EAAO;MAAyB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACxCnD,OAAA;QAAQoD,KAAK,EAAE7C,UAAW;QAAC8C,QAAQ,EAAGC,CAAC,IAAK9C,aAAa,CAAC+C,MAAM,CAACD,CAAC,CAACE,MAAM,CAACJ,KAAK,CAAC,CAAE;QAAAL,QAAA,EAC/E,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAACU,GAAG,CAACC,CAAC,iBAAI1D,OAAA;UAAgBoD,KAAK,EAAEM,CAAE;UAAAX,QAAA,EAAEW;QAAC,GAAfA,CAAC;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAuB,CAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrD,CAAC,eACTnD,OAAA;QAAQyC,SAAS,EAAC,QAAQ;QAACkB,OAAO,EAAEhC,SAAU;QAAAoB,QAAA,EAAC;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/D,CAAC,gBAENnD,OAAA,CAAAE,SAAA;MAAA6C,QAAA,eACE/C,OAAA;QAAKyC,SAAS,EAAC,UAAU;QAAAM,QAAA,gBACvB/C,OAAA;UAAA+C,QAAA,GAAG,sBAAU,EAACtC,aAAa,GAAG,CAAC,EAAC,SAAO;QAAA;UAAAuC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eAC3CnD,OAAA;UAAQyC,SAAS,EAAC,QAAQ;UAACkB,OAAO,EAAE3B,QAAS;UAAAe,QAAA,EAAC;QAAS;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,EAC/DxC,UAAU,iBACTX,OAAA;UAAKyC,SAAS,EAAC,gBAAgB;UAAAM,QAAA,gBAC7B/C,OAAA;YACE4D,GAAG,EAAE,YAAYjD,UAAU,MAAO;YAClCkD,GAAG,EAAE,QAAQlD,UAAU,EAAG;YAC1B8B,SAAS,EAAC;UAAU;YAAAO,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACrB,CAAC,eACFnD,OAAA;YAAK8B,EAAE,EAAC,cAAc;YAAAiB,QAAA,GAAC,cAAY,EAACpC,UAAU;UAAA;YAAAqC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAClD,CACN;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE;IAAC,gBACN,CACH,eAEDnD,OAAA;MACE8B,EAAE,EAAC,OAAO;MACVY,KAAK,EAAE;QACLC,eAAe,EAAE,6BAA6B;QAC9CmB,gBAAgB,EAAE,WAAW;QAC7BlB,cAAc,EAAE;MAClB,CAAE;MAAAG,QAAA,EAEDhC,KAAK,CAAC0C,GAAG,CAAC,CAACM,GAAG,EAAEC,KAAK,kBACpBhE,OAAA;QAAKyC,SAAS,EAAC,MAAM;QAAAM,QAAA,EAIlB1C,OAAO,CAACoD,GAAG,CAAC,CAACQ,CAAC,EAAEpC,CAAC,KAChBoC,CAAC,CAAClC,GAAG,KAAKgC,GAAG,iBACX/D,OAAA;UAEEyC,SAAS,EAAC,QAAQ;UAClBC,KAAK,EAAE;YACLwB,eAAe,EAAE1B,YAAY,CAACyB,CAAC,CAACnC,EAAE,CAAC;YACnCqC,IAAI,EAAE,GAAGtC,CAAC,GAAG,EAAE;UACjB,CAAE;UAAAkB,QAAA,EAEDkB,CAAC,CAACnC,EAAE,GAAG;QAAC,GAPJD,CAAC;UAAAmB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAQH,CAET;MAAC,GAjBwBa,KAAK;QAAAhB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAkB3B,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAC/C,EAAA,CAhJQD,GAAG;AAAAiE,EAAA,GAAHjE,GAAG;AAkJZ,eAAeA,GAAG;AAAC,IAAAiE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}