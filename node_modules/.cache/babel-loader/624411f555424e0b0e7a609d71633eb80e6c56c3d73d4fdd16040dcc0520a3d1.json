{"ast":null,"code":"var _jsxFileName = \"/Users/keerthanajusjith/Downloads/Projects/snake-and-ladders/src/App.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import './App.css';\n\n// function App() {\n//   const [players, setPlayers] = useState([]);\n//   const [numPlayers, setNumPlayers] = useState(2);\n//   const [currentPlayer, setCurrentPlayer] = useState(0);\n//   const [diceResult, setDiceResult] = useState(null);\n//   const [gameStarted, setGameStarted] = useState(false);\n//   const [tiles, setTiles] = useState([]);\n\n//   const ladders = [\n//     { start: 4, end: 25 },\n//     { start: 13, end: 46 },\n//     { start: 42, end: 63 },\n//     { start: 50, end: 69 },\n//     { start: 62, end: 81 },\n//     { start: 74, end: 92 }\n//   ];\n\n//   const snakes = [\n//     { start: 24, end: 5 },\n//     { start: 40, end: 3 },\n//     { start: 43, end: 18 },\n//     { start: 54, end: 31 },\n//     { start: 66, end: 45 },\n//     { start: 89, end: 53 },\n//     { start: 95, end: 77 },\n//     { start: 99, end: 41 }\n//   ];\n\n//   const playerColors = ['#d9a441', '#6a994e', '#bc6c25', '#1d3557'];\n\n//   useEffect(() => {\n//     const newTiles = [];\n//     for (let row = 0; row < 10; row++) {\n//       const currentRow = [];\n//       for (let col = 0; col < 10; col++) {\n//         const num = row % 2 === 0 ? row * 10 + col + 1 : row * 10 + (9 - col) + 1;\n//         currentRow.push(num);\n//       }\n//       newTiles.unshift(...currentRow);\n//     }\n//     setTiles(newTiles);\n//   }, []);\n\n//   const startGame = () => {\n//     const initPlayers = [];\n//     for (let i = 0; i < numPlayers; i++) {\n//       initPlayers.push({ id: i, pos: 1 });\n//     }\n//     setPlayers(initPlayers);\n//     setCurrentPlayer(0);\n//     setGameStarted(true);\n//     setDiceResult(null);\n//   };\n\n//   const rollDice = () => {\n//     const roll = Math.floor(Math.random() * 6) + 1;\n//     setDiceResult(roll);\n\n//     setPlayers((prevPlayers) => {\n//       return prevPlayers.map((player, i) => {\n//         if (i === currentPlayer) {\n//           let newPos = player.pos + roll;\n\n//           if (newPos > 100) newPos = player.pos;\n\n//           const ladder = ladders.find(l => l.start === newPos);\n//           if (ladder) newPos = ladder.end;\n\n//           const snake = snakes.find(s => s.start === newPos);\n//           if (snake) newPos = snake.end;\n\n//           if (newPos === 100) {\n//             alert(`ðŸŽ‰ Player ${i + 1} wins!`);\n//             setGameStarted(false);\n//           }\n\n//           return { ...player, pos: newPos };\n//         }\n//         return player;\n//       });\n//     });\n\n//     setTimeout(() => {\n//       setCurrentPlayer((prev) => (prev + 1) % numPlayers);\n//     }, 500);\n//   };\n\n//   return (\n//     <div\n//       className=\"game\"\n//       style={{\n//         backgroundImage: \"url('/img/art.png')\",\n//         backgroundSize: \"cover\",\n//         backgroundPosition: \"center\",\n//         backgroundAttachment: \"fixed\",\n//         minHeight: \"100vh\",\n//         padding: \"20px\",\n//         color: \"#fff\",\n//         boxSizing: \"border-box\",\n//       }}\n//     >\n//       <h1 className=\"title\">Welcome To Snakes and Ladders</h1>\n\n//       {!gameStarted ? (\n//         <div className=\"setup\">\n//           <label>Select number of players:</label>\n//           <select value={numPlayers} onChange={(e) => setNumPlayers(Number(e.target.value))}>\n//             {[2, 3, 4].map(n => <option key={n} value={n}>{n}</option>)}\n//           </select>\n//           <button className=\"button\" onClick={startGame}>Start Game</button>\n//         </div>\n//       ) : (\n//          <div className=\"main-layout\">\n\n//           {/* Board on Left */}\n//           <div className=\"board-container\">\n//             <img src=\"/img/SnakeLadder.png\" alt=\"Board\" className=\"board-img\" />\n//             {players.map((p, i) => {\n//               const posIndex = tiles.indexOf(p.pos);\n//               const row = Math.floor(posIndex / 10);\n//               const col = posIndex % 10;\n//               const top = `${row * 10 + 5}%`;\n//               const left = `${col * 10 + 5}%`;\n\n//               // Offset each player by a few pixels to prevent overlap\n//               const offsetX = (i % 2) * 10;\n//               const offsetY = Math.floor(i / 2) * 10;\n\n//               return (\n//                 <div\n//                   key={i}\n//                   className=\"player-piece\"\n//                   style={{\n//                     top: `calc(${top} + ${offsetY}px)`,\n//                     left: `calc(${left} + ${offsetX}px)`,\n//                     backgroundColor: playerColors[p.id]\n//                   }}\n//                 >\n//                   {p.id + 1}\n//                 </div>\n//               );\n//             })}\n//           </div>\n\n//           {/* Controls on Right */}\n//           <div className=\"controls\">\n//             <p>ðŸŽ² Player {currentPlayer + 1}'s turn</p>\n//             <button className=\"button\" onClick={rollDice}>Roll Dice</button>\n//             {diceResult && (\n//               <div className=\"dice-container\">\n//                 <img\n//                   src={`/img/dice${diceResult}.png`}\n//                   alt={`Dice ${diceResult}`}\n//                   className=\"dice-img\"\n//                 />\n//                 <div id=\"dice-results\">You rolled: {diceResult}</div>\n//               </div>\n//             )}\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [players, setPlayers] = useState([]);\n  const [numPlayers, setNumPlayers] = useState(2);\n  const [currentPlayer, setCurrentPlayer] = useState(0);\n  const [diceResult, setDiceResult] = useState(null);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [tiles, setTiles] = useState([]);\n  const ladders = [{\n    start: 4,\n    end: 25\n  }, {\n    start: 13,\n    end: 46\n  }, {\n    start: 42,\n    end: 63\n  }, {\n    start: 50,\n    end: 69\n  }, {\n    start: 62,\n    end: 81\n  }, {\n    start: 74,\n    end: 92\n  }];\n  const snakes = [{\n    start: 24,\n    end: 5\n  }, {\n    start: 40,\n    end: 3\n  }, {\n    start: 43,\n    end: 18\n  }, {\n    start: 54,\n    end: 31\n  }, {\n    start: 66,\n    end: 45\n  }, {\n    start: 89,\n    end: 53\n  }, {\n    start: 95,\n    end: 77\n  }, {\n    start: 99,\n    end: 41\n  }];\n  const playerColors = ['#d9a441', '#6a994e', '#bc6c25', '#1d3557'];\n  useEffect(() => {\n    const newTiles = [];\n    for (let row = 0; row < 10; row++) {\n      const currentRow = [];\n      for (let col = 0; col < 10; col++) {\n        const num = row % 2 === 0 ? row * 10 + col + 1 : row * 10 + (9 - col) + 1;\n        currentRow.push(num);\n      }\n      newTiles.unshift(...currentRow);\n    }\n    setTiles(newTiles);\n  }, []);\n  const startGame = () => {\n    const initPlayers = [];\n    for (let i = 0; i < numPlayers; i++) {\n      initPlayers.push({\n        id: i,\n        pos: 1\n      });\n    }\n    setPlayers(initPlayers);\n    setCurrentPlayer(0);\n    setGameStarted(true);\n    setDiceResult(null);\n  };\n  const rollDice = () => {\n    const roll = Math.floor(Math.random() * 6) + 1;\n    setDiceResult(roll);\n    setPlayers(prevPlayers => {\n      return prevPlayers.map((player, i) => {\n        if (i === currentPlayer) {\n          let newPos = player.pos + roll;\n          if (newPos > 100) newPos = player.pos;\n          const ladder = ladders.find(l => l.start === newPos);\n          if (ladder) newPos = ladder.end;\n          const snake = snakes.find(s => s.start === newPos);\n          if (snake) newPos = snake.end;\n          if (newPos === 100) {\n            alert(`ðŸŽ‰ Player ${i + 1} wins!`);\n            setGameStarted(false);\n          }\n          return {\n            ...player,\n            pos: newPos\n          };\n        }\n        return player;\n      });\n    });\n    setTimeout(() => {\n      setCurrentPlayer(prev => (prev + 1) % numPlayers);\n    }, 500);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    style: {\n      backgroundImage: \"url('/img/art.png')\",\n      backgroundSize: \"cover\",\n      backgroundPosition: \"center\",\n      backgroundAttachment: \"fixed\",\n      minHeight: \"100vh\",\n      padding: \"20px\",\n      color: \"#fff\",\n      boxSizing: \"border-box\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Welcome To Snakes and Ladders\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }, this), !gameStarted ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"setup\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Select number of players:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: numPlayers,\n        onChange: e => setNumPlayers(Number(e.target.value)),\n        style: {\n          marginBottom: \"1rem\"\n        },\n        children: [2, 3, 4].map(n => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: n,\n          children: n\n        }, n, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 33\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button\",\n        onClick: startGame,\n        children: \"Start Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-column\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"/img/SnakeLadder.png\",\n          alt: \"Board\",\n          className: \"board-img\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 13\n        }, this), players.map((p, i) => {\n          const posIndex = tiles.indexOf(p.pos);\n          const row = Math.floor(posIndex / 10);\n          const col = posIndex % 10;\n          const top = `${row * 10 + 5}%`;\n          const left = `${col * 10 + 5}%`;\n          const offsetX = i % 2 * 10;\n          const offsetY = Math.floor(i / 2) * 10;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"player-piece\",\n            style: {\n              top: `calc(${top} + ${offsetY}px)`,\n              left: `calc(${left} + ${offsetX}px)`,\n              backgroundColor: playerColors[p.id]\n            },\n            children: p.id + 1\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 17\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\uD83C\\uDFB2 Player \", currentPlayer + 1, \"'s turn\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button\",\n          onClick: rollDice,\n          children: \"Roll Dice\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dice-container\",\n          children: diceResult && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: `/img/dice${diceResult}.png`,\n              alt: `Dice ${diceResult}`,\n              className: \"dice-img\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 327,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"dice-results\",\n              children: [\"You rolled: \", diceResult]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 332,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 262,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"dWFdbFMknHD5JxOW+wFDTfwj82k=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","players","setPlayers","numPlayers","setNumPlayers","currentPlayer","setCurrentPlayer","diceResult","setDiceResult","gameStarted","setGameStarted","tiles","setTiles","ladders","start","end","snakes","playerColors","newTiles","row","currentRow","col","num","push","unshift","startGame","initPlayers","i","id","pos","rollDice","roll","Math","floor","random","prevPlayers","map","player","newPos","ladder","find","l","snake","s","alert","setTimeout","prev","className","style","backgroundImage","backgroundSize","backgroundPosition","backgroundAttachment","minHeight","padding","color","boxSizing","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","Number","target","marginBottom","n","onClick","src","alt","p","posIndex","indexOf","top","left","offsetX","offsetY","backgroundColor","_c","$RefreshReg$"],"sources":["/Users/keerthanajusjith/Downloads/Projects/snake-and-ladders/src/App.js"],"sourcesContent":["\n// import React, { useState, useEffect } from 'react';\n// import './App.css';\n\n// function App() {\n//   const [players, setPlayers] = useState([]);\n//   const [numPlayers, setNumPlayers] = useState(2);\n//   const [currentPlayer, setCurrentPlayer] = useState(0);\n//   const [diceResult, setDiceResult] = useState(null);\n//   const [gameStarted, setGameStarted] = useState(false);\n//   const [tiles, setTiles] = useState([]);\n\n//   const ladders = [\n//     { start: 4, end: 25 },\n//     { start: 13, end: 46 },\n//     { start: 42, end: 63 },\n//     { start: 50, end: 69 },\n//     { start: 62, end: 81 },\n//     { start: 74, end: 92 }\n//   ];\n\n//   const snakes = [\n//     { start: 24, end: 5 },\n//     { start: 40, end: 3 },\n//     { start: 43, end: 18 },\n//     { start: 54, end: 31 },\n//     { start: 66, end: 45 },\n//     { start: 89, end: 53 },\n//     { start: 95, end: 77 },\n//     { start: 99, end: 41 }\n//   ];\n\n//   const playerColors = ['#d9a441', '#6a994e', '#bc6c25', '#1d3557'];\n\n//   useEffect(() => {\n//     const newTiles = [];\n//     for (let row = 0; row < 10; row++) {\n//       const currentRow = [];\n//       for (let col = 0; col < 10; col++) {\n//         const num = row % 2 === 0 ? row * 10 + col + 1 : row * 10 + (9 - col) + 1;\n//         currentRow.push(num);\n//       }\n//       newTiles.unshift(...currentRow);\n//     }\n//     setTiles(newTiles);\n//   }, []);\n\n//   const startGame = () => {\n//     const initPlayers = [];\n//     for (let i = 0; i < numPlayers; i++) {\n//       initPlayers.push({ id: i, pos: 1 });\n//     }\n//     setPlayers(initPlayers);\n//     setCurrentPlayer(0);\n//     setGameStarted(true);\n//     setDiceResult(null);\n//   };\n\n//   const rollDice = () => {\n//     const roll = Math.floor(Math.random() * 6) + 1;\n//     setDiceResult(roll);\n\n//     setPlayers((prevPlayers) => {\n//       return prevPlayers.map((player, i) => {\n//         if (i === currentPlayer) {\n//           let newPos = player.pos + roll;\n\n//           if (newPos > 100) newPos = player.pos;\n\n//           const ladder = ladders.find(l => l.start === newPos);\n//           if (ladder) newPos = ladder.end;\n\n//           const snake = snakes.find(s => s.start === newPos);\n//           if (snake) newPos = snake.end;\n\n//           if (newPos === 100) {\n//             alert(`ðŸŽ‰ Player ${i + 1} wins!`);\n//             setGameStarted(false);\n//           }\n\n//           return { ...player, pos: newPos };\n//         }\n//         return player;\n//       });\n//     });\n\n//     setTimeout(() => {\n//       setCurrentPlayer((prev) => (prev + 1) % numPlayers);\n//     }, 500);\n//   };\n\n//   return (\n//     <div\n//       className=\"game\"\n//       style={{\n//         backgroundImage: \"url('/img/art.png')\",\n//         backgroundSize: \"cover\",\n//         backgroundPosition: \"center\",\n//         backgroundAttachment: \"fixed\",\n//         minHeight: \"100vh\",\n//         padding: \"20px\",\n//         color: \"#fff\",\n//         boxSizing: \"border-box\",\n//       }}\n//     >\n//       <h1 className=\"title\">Welcome To Snakes and Ladders</h1>\n\n//       {!gameStarted ? (\n//         <div className=\"setup\">\n//           <label>Select number of players:</label>\n//           <select value={numPlayers} onChange={(e) => setNumPlayers(Number(e.target.value))}>\n//             {[2, 3, 4].map(n => <option key={n} value={n}>{n}</option>)}\n//           </select>\n//           <button className=\"button\" onClick={startGame}>Start Game</button>\n//         </div>\n//       ) : (\n//          <div className=\"main-layout\">\n\n\n//           {/* Board on Left */}\n//           <div className=\"board-container\">\n//             <img src=\"/img/SnakeLadder.png\" alt=\"Board\" className=\"board-img\" />\n//             {players.map((p, i) => {\n//               const posIndex = tiles.indexOf(p.pos);\n//               const row = Math.floor(posIndex / 10);\n//               const col = posIndex % 10;\n//               const top = `${row * 10 + 5}%`;\n//               const left = `${col * 10 + 5}%`;\n\n//               // Offset each player by a few pixels to prevent overlap\n//               const offsetX = (i % 2) * 10;\n//               const offsetY = Math.floor(i / 2) * 10;\n\n//               return (\n//                 <div\n//                   key={i}\n//                   className=\"player-piece\"\n//                   style={{\n//                     top: `calc(${top} + ${offsetY}px)`,\n//                     left: `calc(${left} + ${offsetX}px)`,\n//                     backgroundColor: playerColors[p.id]\n//                   }}\n//                 >\n//                   {p.id + 1}\n//                 </div>\n//               );\n//             })}\n//           </div>\n\n//           {/* Controls on Right */}\n//           <div className=\"controls\">\n//             <p>ðŸŽ² Player {currentPlayer + 1}'s turn</p>\n//             <button className=\"button\" onClick={rollDice}>Roll Dice</button>\n//             {diceResult && (\n//               <div className=\"dice-container\">\n//                 <img\n//                   src={`/img/dice${diceResult}.png`}\n//                   alt={`Dice ${diceResult}`}\n//                   className=\"dice-img\"\n//                 />\n//                 <div id=\"dice-results\">You rolled: {diceResult}</div>\n//               </div>\n//             )}\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [players, setPlayers] = useState([]);\n  const [numPlayers, setNumPlayers] = useState(2);\n  const [currentPlayer, setCurrentPlayer] = useState(0);\n  const [diceResult, setDiceResult] = useState(null);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [tiles, setTiles] = useState([]);\n\n  const ladders = [\n    { start: 4, end: 25 },\n    { start: 13, end: 46 },\n    { start: 42, end: 63 },\n    { start: 50, end: 69 },\n    { start: 62, end: 81 },\n    { start: 74, end: 92 }\n  ];\n\n  const snakes = [\n    { start: 24, end: 5 },\n    { start: 40, end: 3 },\n    { start: 43, end: 18 },\n    { start: 54, end: 31 },\n    { start: 66, end: 45 },\n    { start: 89, end: 53 },\n    { start: 95, end: 77 },\n    { start: 99, end: 41 }\n  ];\n\n  const playerColors = ['#d9a441', '#6a994e', '#bc6c25', '#1d3557'];\n\n  useEffect(() => {\n    const newTiles = [];\n    for (let row = 0; row < 10; row++) {\n      const currentRow = [];\n      for (let col = 0; col < 10; col++) {\n        const num = row % 2 === 0 ? row * 10 + col + 1 : row * 10 + (9 - col) + 1;\n        currentRow.push(num);\n      }\n      newTiles.unshift(...currentRow);\n    }\n    setTiles(newTiles);\n  }, []);\n\n  const startGame = () => {\n    const initPlayers = [];\n    for (let i = 0; i < numPlayers; i++) {\n      initPlayers.push({ id: i, pos: 1 });\n    }\n    setPlayers(initPlayers);\n    setCurrentPlayer(0);\n    setGameStarted(true);\n    setDiceResult(null);\n  };\n\n  const rollDice = () => {\n    const roll = Math.floor(Math.random() * 6) + 1;\n    setDiceResult(roll);\n\n    setPlayers((prevPlayers) => {\n      return prevPlayers.map((player, i) => {\n        if (i === currentPlayer) {\n          let newPos = player.pos + roll;\n          if (newPos > 100) newPos = player.pos;\n\n          const ladder = ladders.find(l => l.start === newPos);\n          if (ladder) newPos = ladder.end;\n\n          const snake = snakes.find(s => s.start === newPos);\n          if (snake) newPos = snake.end;\n\n          if (newPos === 100) {\n            alert(`ðŸŽ‰ Player ${i + 1} wins!`);\n            setGameStarted(false);\n          }\n\n          return { ...player, pos: newPos };\n        }\n        return player;\n      });\n    });\n\n    setTimeout(() => {\n      setCurrentPlayer((prev) => (prev + 1) % numPlayers);\n    }, 500);\n  };\n\n  return (\n    <div\n      className=\"game\"\n      style={{\n        backgroundImage: \"url('/img/art.png')\",\n        backgroundSize: \"cover\",\n        backgroundPosition: \"center\",\n        backgroundAttachment: \"fixed\",\n        minHeight: \"100vh\",\n        padding: \"20px\",\n        color: \"#fff\",\n        boxSizing: \"border-box\",\n      }}\n    >\n      <h1 className=\"title\">Welcome To Snakes and Ladders</h1>\n\n      {!gameStarted ? (\n        <div className=\"setup\">\n          <label>Select number of players:</label>\n          <select\n            value={numPlayers}\n            onChange={(e) => setNumPlayers(Number(e.target.value))}\n            style={{ marginBottom: \"1rem\" }}\n          >\n            {[2, 3, 4].map(n => <option key={n} value={n}>{n}</option>)}\n          </select>\n          <br />\n          <button className=\"button\" onClick={startGame}>Start Game</button>\n        </div>\n      ) : (\n        <div className=\"main-column\">\n          {/* Board First */}\n          <div className=\"board-container\">\n            <img src=\"/img/SnakeLadder.png\" alt=\"Board\" className=\"board-img\" />\n            {players.map((p, i) => {\n              const posIndex = tiles.indexOf(p.pos);\n              const row = Math.floor(posIndex / 10);\n              const col = posIndex % 10;\n              const top = `${row * 10 + 5}%`;\n              const left = `${col * 10 + 5}%`;\n              const offsetX = (i % 2) * 10;\n              const offsetY = Math.floor(i / 2) * 10;\n\n              return (\n                <div\n                  key={i}\n                  className=\"player-piece\"\n                  style={{\n                    top: `calc(${top} + ${offsetY}px)`,\n                    left: `calc(${left} + ${offsetX}px)`,\n                    backgroundColor: playerColors[p.id]\n                  }}\n                >\n                  {p.id + 1}\n                </div>\n              );\n            })}\n          </div>\n\n          {/* Controls BELOW the board */}\n          <div className=\"controls\">\n            <p>ðŸŽ² Player {currentPlayer + 1}'s turn</p>\n            <button className=\"button\" onClick={rollDice}>Roll Dice</button>\n            <div className=\"dice-container\">\n              {diceResult && (\n                <>\n                  <img\n                    src={`/img/dice${diceResult}.png`}\n                    alt={`Dice ${diceResult}`}\n                    className=\"dice-img\"\n                  />\n                  <div id=\"dice-results\">You rolled: {diceResult}</div>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],"mappings":";;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACU,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACY,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC;EACrD,MAAM,CAACc,UAAU,EAAEC,aAAa,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACgB,WAAW,EAAEC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}