{"ast":null,"code":"var _jsxFileName = \"/Users/keerthanajusjith/Downloads/Projects/snake-and-ladders/src/App.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import './App.css';\n\n// function App() {\n//   const [players, setPlayers] = useState([]);\n//   const [numPlayers, setNumPlayers] = useState(2);\n//   const [currentPlayer, setCurrentPlayer] = useState(0);\n//   const [diceResult, setDiceResult] = useState(null);\n//   const [gameStarted, setGameStarted] = useState(false);\n//   const [tiles, setTiles] = useState([]);\n\n//   const ladders = [\n//     { start: 4, end: 25 },\n//     { start: 13, end: 46 },\n//     { start: 42, end: 63 },\n//     { start: 50, end: 69 },\n//     { start: 62, end: 81 },\n//     { start: 74, end: 92 }\n//   ];\n\n//   const snakes = [\n//     { start: 22, end: 5 },\n//     { start: 40, end: 3 },\n//     { start: 43, end: 18 },\n//     { start: 56, end: 31 },\n//     { start: 66, end: 45},\n//     { start: 89, end: 53 },\n//     { start: 95, end: 77 },\n//     { start: 99, end: 41 }\n//   ];\n\n//   useEffect(() => {\n//     const newTiles = [];\n//     for (let row = 0; row < 10; row++) {\n//       const currentRow = [];\n//       for (let col = 0; col < 10; col++) {\n//         const num = row % 2 === 0 ? row * 10 + col + 1 : row * 10 + (9 - col) + 1;\n//         currentRow.push(num);\n//       }\n//       newTiles.unshift(...currentRow);\n//     }\n//     setTiles(newTiles);\n//   }, []);\n\n//   const startGame = () => {\n//     const initPlayers = [];\n//     for (let i = 0; i < numPlayers; i++) {\n//       initPlayers.push({ id: i, pos: 1 });\n//     }\n//     setPlayers(initPlayers);\n//     setCurrentPlayer(0);\n//     setGameStarted(true);\n//     setDiceResult(null);\n//   };\n\n//   const rollDice = () => {\n//     const roll = Math.floor(Math.random() * 6) + 1;\n//     setDiceResult(roll);\n\n//     setPlayers((prevPlayers) => {\n//       return prevPlayers.map((player, i) => {\n//         if (i === currentPlayer) {\n//           let newPos = player.pos + roll;\n\n//           if (newPos > 100) newPos = player.pos;\n\n//           const ladder = ladders.find(l => l.start === newPos);\n//           if (ladder) newPos = ladder.end;\n\n//           const snake = snakes.find(s => s.start === newPos);\n//           if (snake) newPos = snake.end;\n\n//           if (newPos === 100) {\n//             alert(`ðŸŽ‰ Player ${i + 1} wins!`);\n//             setGameStarted(false);\n//           }\n\n//           return { ...player, pos: newPos };\n//         }\n//         return player;\n//       });\n//     });\n\n//     setTimeout(() => {\n//       setCurrentPlayer((prev) => (prev + 1) % numPlayers);\n//     }, 500);\n//   };\n\n//   const playerColors = ['#d9a441', '#6a994e', '#bc6c25', '#1d3557'];\n\n//   return (\n//     <div\n//       className=\"game\"\n//       style={{\n//         backgroundImage: \"url('/img/art.png')\",\n//         backgroundSize: \"cover\",\n//         backgroundAttachment: \"fixed\",\n//         backgroundPosition: \"center\"\n//       }}\n//     >\n//       <h1>Welcome To Snakes and Ladders</h1>\n\n//       {!gameStarted ? (\n//         <div className=\"setup\">\n//           <label>Select number of players:</label>\n//           <select value={numPlayers} onChange={(e) => setNumPlayers(Number(e.target.value))}>\n//             {[2, 3, 4].map(n => <option key={n} value={n}>{n}</option>)}\n//           </select>\n//           <button className=\"button\" onClick={startGame}>Start Game</button>\n//         </div>\n//       ) : (\n//         <>\n//           <div className=\"controls\">\n//             <p>ðŸŽ² Player {currentPlayer + 1}'s turn</p>\n//             <button className=\"button\" onClick={rollDice}>Roll Dice</button>\n//             {diceResult && (\n//               <div className=\"dice-container\">\n//                 <img\n//                   src={`/img/dice${diceResult}.png`}\n//                   alt={`Dice ${diceResult}`}\n//                   className=\"dice-img\"\n//                 />\n//                 <div id=\"dice-results\">You rolled: {diceResult}</div>\n//               </div>\n//             )}\n//           </div>\n\n//           <div className=\"board-container\">\n//             <img src=\"/img/SnakeLadder.png\" alt=\"Board\" className=\"board-img\" />\n//             {players.map((p, i) => {\n//   const posIndex = tiles.indexOf(p.pos);\n//   const row = Math.floor(posIndex / 10);\n//   const col = posIndex % 10;\n\n//   const top = `${row * 10 + 5}%`; // 10% per row, +5% to center in tile\n//   const left = `${col * 10 + 5}%`; // 10% per col, +5% to center in tile\n\n//   return (\n//     <div\n//       key={i}\n//       className=\"player-piece\"\n\n//       style={{\n//         position: 'absolute',\n//         top,\n//         left,\n//         backgroundColor: playerColors[p.id],\n//         width: '5%', // size of the token\n//         height: '5%',\n//         borderRadius: '50%',\n//         transform: 'translate(-50%, -50%)', // center visually\n//         display: 'flex',\n//         justifyContent: 'center',\n//         alignItems: 'center',\n//         color: 'white',\n//         fontWeight: 'bold',\n//         fontSize: '0.8rem'\n//       }}\n//     >\n//       {p.id + 1}\n//     </div>\n//   );\n// })}\n\n//           </div>\n//         </>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [players, setPlayers] = useState([]);\n  const [numPlayers, setNumPlayers] = useState(2);\n  const [currentPlayer, setCurrentPlayer] = useState(0);\n  const [diceResult, setDiceResult] = useState(null);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [tiles, setTiles] = useState([]);\n  const ladders = [{\n    start: 4,\n    end: 25\n  }, {\n    start: 13,\n    end: 46\n  }, {\n    start: 42,\n    end: 63\n  }, {\n    start: 50,\n    end: 69\n  }, {\n    start: 62,\n    end: 81\n  }, {\n    start: 74,\n    end: 92\n  }];\n  const snakes = [{\n    start: 22,\n    end: 5\n  }, {\n    start: 40,\n    end: 3\n  }, {\n    start: 43,\n    end: 18\n  }, {\n    start: 56,\n    end: 31\n  }, {\n    start: 66,\n    end: 45\n  }, {\n    start: 89,\n    end: 53\n  }, {\n    start: 95,\n    end: 77\n  }, {\n    start: 99,\n    end: 41\n  }];\n  useEffect(() => {\n    const newTiles = [];\n    for (let row = 0; row < 10; row++) {\n      const currentRow = [];\n      for (let col = 0; col < 10; col++) {\n        const num = row % 2 === 0 ? row * 10 + col + 1 : row * 10 + (9 - col) + 1;\n        currentRow.push(num);\n      }\n      newTiles.unshift(...currentRow);\n    }\n    setTiles(newTiles);\n  }, []);\n  const startGame = () => {\n    const initPlayers = [];\n    for (let i = 0; i < numPlayers; i++) {\n      initPlayers.push({\n        id: i,\n        pos: 1\n      });\n    }\n    setPlayers(initPlayers);\n    setCurrentPlayer(0);\n    setGameStarted(true);\n    setDiceResult(null);\n  };\n  const rollDice = () => {\n    const roll = Math.floor(Math.random() * 6) + 1;\n    setDiceResult(roll);\n    setPlayers(prevPlayers => {\n      return prevPlayers.map((player, i) => {\n        if (i === currentPlayer) {\n          let newPos = player.pos + roll;\n          if (newPos > 100) newPos = player.pos;\n          const ladder = ladders.find(l => l.start === newPos);\n          if (ladder) newPos = ladder.end;\n          const snake = snakes.find(s => s.start === newPos);\n          if (snake) newPos = snake.end;\n          if (newPos === 100) {\n            setTimeout(() => {\n              alert(`ðŸŽ‰ Player ${i + 1} wins!`);\n              setGameStarted(false);\n            }, 200);\n          }\n          return {\n            ...player,\n            pos: newPos\n          };\n        }\n        return player;\n      });\n    });\n    setTimeout(() => {\n      setCurrentPlayer(prev => (prev + 1) % numPlayers);\n    }, 500);\n  };\n  const playerColors = ['#d9a441', '#6a994e', '#bc6c25', '#1d3557'];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    style: {\n      backgroundImage: \"url('/img/art.png')\",\n      backgroundSize: \"cover\",\n      backgroundAttachment: \"fixed\",\n      backgroundPosition: \"center\",\n      minHeight: \"100vh\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      padding: \"1rem\"\n    },\n    children: !gameStarted ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Welcome To Snakes and Ladders\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"setup\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Select number of players:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: numPlayers,\n          onChange: e => setNumPlayers(Number(e.target.value)),\n          children: [2, 3, 4].map(n => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: n,\n            children: n\n          }, n, false, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 35\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button\",\n          onClick: startGame,\n          children: \"Start Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 13\n        }, this), players.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button\",\n          onClick: startGame,\n          children: \"Play Again\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\uD83C\\uDFB2 Player \", currentPlayer + 1, \"'s turn\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button\",\n          \"aria-label\": \"Roll the dice\",\n          onClick: rollDice,\n          children: \"Roll Dice\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 13\n        }, this), diceResult && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dice-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: `/img/dice${diceResult}.png`,\n            alt: `Dice ${diceResult}`,\n            className: \"dice-img\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"dice-results\",\n            children: [\"You rolled: \", diceResult]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-container\",\n        style: {\n          position: \"relative\",\n          maxWidth: \"90vmin\",\n          maxHeight: \"90vmin\",\n          marginTop: \"1rem\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"/img/SnakeLadder.png\",\n          alt: \"Board\",\n          className: \"board-img\",\n          style: {\n            width: \"100%\",\n            height: \"auto\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 13\n        }, this), players.map((p, i) => {\n          const posIndex = tiles.indexOf(p.pos);\n          const row = Math.floor(posIndex / 10);\n          const col = posIndex % 10;\n          const top = `${row * 10 + 5}%`;\n          const left = `${col * 10 + 5}%`;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"player-piece\",\n            style: {\n              position: 'absolute',\n              top,\n              left,\n              backgroundColor: playerColors[p.id],\n              width: '5%',\n              height: '5%',\n              borderRadius: '50%',\n              transform: 'translate(-50%, -50%)',\n              display: 'flex',\n              justifyContent: 'center',\n              alignItems: 'center',\n              color: 'white',\n              fontWeight: 'bold',\n              fontSize: '0.8rem'\n            },\n            children: p.id + 1\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 17\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 266,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"dWFdbFMknHD5JxOW+wFDTfwj82k=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","players","setPlayers","numPlayers","setNumPlayers","currentPlayer","setCurrentPlayer","diceResult","setDiceResult","gameStarted","setGameStarted","tiles","setTiles","ladders","start","end","snakes","newTiles","row","currentRow","col","num","push","unshift","startGame","initPlayers","i","id","pos","rollDice","roll","Math","floor","random","prevPlayers","map","player","newPos","ladder","find","l","snake","s","setTimeout","alert","prev","playerColors","className","style","backgroundImage","backgroundSize","backgroundAttachment","backgroundPosition","minHeight","display","flexDirection","alignItems","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","Number","target","n","onClick","length","src","alt","position","maxWidth","maxHeight","marginTop","width","height","p","posIndex","indexOf","top","left","backgroundColor","borderRadius","transform","justifyContent","color","fontWeight","fontSize","_c","$RefreshReg$"],"sources":["/Users/keerthanajusjith/Downloads/Projects/snake-and-ladders/src/App.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import './App.css';\n\n// function App() {\n//   const [players, setPlayers] = useState([]);\n//   const [numPlayers, setNumPlayers] = useState(2);\n//   const [currentPlayer, setCurrentPlayer] = useState(0);\n//   const [diceResult, setDiceResult] = useState(null);\n//   const [gameStarted, setGameStarted] = useState(false);\n//   const [tiles, setTiles] = useState([]);\n\n//   const ladders = [\n//     { start: 4, end: 25 },\n//     { start: 13, end: 46 },\n//     { start: 42, end: 63 },\n//     { start: 50, end: 69 },\n//     { start: 62, end: 81 },\n//     { start: 74, end: 92 }\n//   ];\n\n//   const snakes = [\n//     { start: 22, end: 5 },\n//     { start: 40, end: 3 },\n//     { start: 43, end: 18 },\n//     { start: 56, end: 31 },\n//     { start: 66, end: 45},\n//     { start: 89, end: 53 },\n//     { start: 95, end: 77 },\n//     { start: 99, end: 41 }\n//   ];\n\n//   useEffect(() => {\n//     const newTiles = [];\n//     for (let row = 0; row < 10; row++) {\n//       const currentRow = [];\n//       for (let col = 0; col < 10; col++) {\n//         const num = row % 2 === 0 ? row * 10 + col + 1 : row * 10 + (9 - col) + 1;\n//         currentRow.push(num);\n//       }\n//       newTiles.unshift(...currentRow);\n//     }\n//     setTiles(newTiles);\n//   }, []);\n\n//   const startGame = () => {\n//     const initPlayers = [];\n//     for (let i = 0; i < numPlayers; i++) {\n//       initPlayers.push({ id: i, pos: 1 });\n//     }\n//     setPlayers(initPlayers);\n//     setCurrentPlayer(0);\n//     setGameStarted(true);\n//     setDiceResult(null);\n//   };\n\n//   const rollDice = () => {\n//     const roll = Math.floor(Math.random() * 6) + 1;\n//     setDiceResult(roll);\n\n//     setPlayers((prevPlayers) => {\n//       return prevPlayers.map((player, i) => {\n//         if (i === currentPlayer) {\n//           let newPos = player.pos + roll;\n\n//           if (newPos > 100) newPos = player.pos;\n\n//           const ladder = ladders.find(l => l.start === newPos);\n//           if (ladder) newPos = ladder.end;\n\n//           const snake = snakes.find(s => s.start === newPos);\n//           if (snake) newPos = snake.end;\n\n//           if (newPos === 100) {\n//             alert(`ðŸŽ‰ Player ${i + 1} wins!`);\n//             setGameStarted(false);\n//           }\n\n//           return { ...player, pos: newPos };\n//         }\n//         return player;\n//       });\n//     });\n\n//     setTimeout(() => {\n//       setCurrentPlayer((prev) => (prev + 1) % numPlayers);\n//     }, 500);\n//   };\n\n//   const playerColors = ['#d9a441', '#6a994e', '#bc6c25', '#1d3557'];\n\n\n//   return (\n//     <div\n//       className=\"game\"\n//       style={{\n//         backgroundImage: \"url('/img/art.png')\",\n//         backgroundSize: \"cover\",\n//         backgroundAttachment: \"fixed\",\n//         backgroundPosition: \"center\"\n//       }}\n//     >\n//       <h1>Welcome To Snakes and Ladders</h1>\n\n//       {!gameStarted ? (\n//         <div className=\"setup\">\n//           <label>Select number of players:</label>\n//           <select value={numPlayers} onChange={(e) => setNumPlayers(Number(e.target.value))}>\n//             {[2, 3, 4].map(n => <option key={n} value={n}>{n}</option>)}\n//           </select>\n//           <button className=\"button\" onClick={startGame}>Start Game</button>\n//         </div>\n//       ) : (\n//         <>\n//           <div className=\"controls\">\n//             <p>ðŸŽ² Player {currentPlayer + 1}'s turn</p>\n//             <button className=\"button\" onClick={rollDice}>Roll Dice</button>\n//             {diceResult && (\n//               <div className=\"dice-container\">\n//                 <img\n//                   src={`/img/dice${diceResult}.png`}\n//                   alt={`Dice ${diceResult}`}\n//                   className=\"dice-img\"\n//                 />\n//                 <div id=\"dice-results\">You rolled: {diceResult}</div>\n//               </div>\n//             )}\n//           </div>\n\n//           <div className=\"board-container\">\n//             <img src=\"/img/SnakeLadder.png\" alt=\"Board\" className=\"board-img\" />\n//             {players.map((p, i) => {\n//   const posIndex = tiles.indexOf(p.pos);\n//   const row = Math.floor(posIndex / 10);\n//   const col = posIndex % 10;\n\n//   const top = `${row * 10 + 5}%`; // 10% per row, +5% to center in tile\n//   const left = `${col * 10 + 5}%`; // 10% per col, +5% to center in tile\n\n//   return (\n//     <div\n//       key={i}\n//       className=\"player-piece\"\n      \n//       style={{\n//         position: 'absolute',\n//         top,\n//         left,\n//         backgroundColor: playerColors[p.id],\n//         width: '5%', // size of the token\n//         height: '5%',\n//         borderRadius: '50%',\n//         transform: 'translate(-50%, -50%)', // center visually\n//         display: 'flex',\n//         justifyContent: 'center',\n//         alignItems: 'center',\n//         color: 'white',\n//         fontWeight: 'bold',\n//         fontSize: '0.8rem'\n//       }}\n//     >\n//       {p.id + 1}\n//     </div>\n//   );\n// })}\n\n//           </div>\n//         </>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [players, setPlayers] = useState([]);\n  const [numPlayers, setNumPlayers] = useState(2);\n  const [currentPlayer, setCurrentPlayer] = useState(0);\n  const [diceResult, setDiceResult] = useState(null);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [tiles, setTiles] = useState([]);\n\n  const ladders = [\n    { start: 4, end: 25 },\n    { start: 13, end: 46 },\n    { start: 42, end: 63 },\n    { start: 50, end: 69 },\n    { start: 62, end: 81 },\n    { start: 74, end: 92 }\n  ];\n\n  const snakes = [\n    { start: 22, end: 5 },\n    { start: 40, end: 3 },\n    { start: 43, end: 18 },\n    { start: 56, end: 31 },\n    { start: 66, end: 45 },\n    { start: 89, end: 53 },\n    { start: 95, end: 77 },\n    { start: 99, end: 41 }\n  ];\n\n  useEffect(() => {\n    const newTiles = [];\n    for (let row = 0; row < 10; row++) {\n      const currentRow = [];\n      for (let col = 0; col < 10; col++) {\n        const num = row % 2 === 0 ? row * 10 + col + 1 : row * 10 + (9 - col) + 1;\n        currentRow.push(num);\n      }\n      newTiles.unshift(...currentRow);\n    }\n    setTiles(newTiles);\n  }, []);\n\n  const startGame = () => {\n    const initPlayers = [];\n    for (let i = 0; i < numPlayers; i++) {\n      initPlayers.push({ id: i, pos: 1 });\n    }\n    setPlayers(initPlayers);\n    setCurrentPlayer(0);\n    setGameStarted(true);\n    setDiceResult(null);\n  };\n\n  const rollDice = () => {\n    const roll = Math.floor(Math.random() * 6) + 1;\n    setDiceResult(roll);\n\n    setPlayers((prevPlayers) => {\n      return prevPlayers.map((player, i) => {\n        if (i === currentPlayer) {\n          let newPos = player.pos + roll;\n          if (newPos > 100) newPos = player.pos;\n\n          const ladder = ladders.find(l => l.start === newPos);\n          if (ladder) newPos = ladder.end;\n\n          const snake = snakes.find(s => s.start === newPos);\n          if (snake) newPos = snake.end;\n\n          if (newPos === 100) {\n            setTimeout(() => {\n              alert(`ðŸŽ‰ Player ${i + 1} wins!`);\n              setGameStarted(false);\n            }, 200);\n          }\n\n          return { ...player, pos: newPos };\n        }\n        return player;\n      });\n    });\n\n    setTimeout(() => {\n      setCurrentPlayer((prev) => (prev + 1) % numPlayers);\n    }, 500);\n  };\n\n  const playerColors = ['#d9a441', '#6a994e', '#bc6c25', '#1d3557'];\n\n  return (\n    <div\n      className=\"game\"\n      style={{\n        backgroundImage: \"url('/img/art.png')\",\n        backgroundSize: \"cover\",\n        backgroundAttachment: \"fixed\",\n        backgroundPosition: \"center\",\n        minHeight: \"100vh\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        padding: \"1rem\",\n      }}\n    >\n      {!gameStarted ? (\n        <>\n          <h1>Welcome To Snakes and Ladders</h1>\n          <div className=\"setup\">\n            <label>Select number of players:</label>\n            <select value={numPlayers} onChange={(e) => setNumPlayers(Number(e.target.value))}>\n              {[2, 3, 4].map(n => <option key={n} value={n}>{n}</option>)}\n            </select>\n            <button className=\"button\" onClick={startGame}>Start Game</button>\n            {players.length > 0 && (\n              <button className=\"button\" onClick={startGame}>Play Again</button>\n            )}\n          </div>\n        </>\n      ) : (\n        <>\n          <div className=\"controls\">\n            <p>ðŸŽ² Player {currentPlayer + 1}'s turn</p>\n            <button className=\"button\" aria-label=\"Roll the dice\" onClick={rollDice}>Roll Dice</button>\n            {diceResult && (\n              <div className=\"dice-container\">\n                <img\n                  src={`/img/dice${diceResult}.png`}\n                  alt={`Dice ${diceResult}`}\n                  className=\"dice-img\"\n                />\n                <div id=\"dice-results\">You rolled: {diceResult}</div>\n              </div>\n            )}\n          </div>\n\n          <div className=\"board-container\" style={{ position: \"relative\", maxWidth: \"90vmin\", maxHeight: \"90vmin\", marginTop: \"1rem\" }}>\n            <img src=\"/img/SnakeLadder.png\" alt=\"Board\" className=\"board-img\" style={{ width: \"100%\", height: \"auto\" }} />\n            {players.map((p, i) => {\n              const posIndex = tiles.indexOf(p.pos);\n              const row = Math.floor(posIndex / 10);\n              const col = posIndex % 10;\n\n              const top = `${row * 10 + 5}%`;\n              const left = `${col * 10 + 5}%`;\n\n              return (\n                <div\n                  key={i}\n                  className=\"player-piece\"\n                  style={{\n                    position: 'absolute',\n                    top,\n                    left,\n                    backgroundColor: playerColors[p.id],\n                    width: '5%',\n                    height: '5%',\n                    borderRadius: '50%',\n                    transform: 'translate(-50%, -50%)',\n                    display: 'flex',\n                    justifyContent: 'center',\n                    alignItems: 'center',\n                    color: 'white',\n                    fontWeight: 'bold',\n                    fontSize: '0.8rem'\n                  }}\n                >\n                  {p.id + 1}\n                </div>\n              );\n            })}\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACU,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACY,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC;EACrD,MAAM,CAACc,UAAU,EAAEC,aAAa,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACgB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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}